/*
 * CAMERA_REGULATOR.H
 *
 *  Created on: 4 mar 2015
 *      Author: szymon
 */

#ifndef CAMERA_REGULATOR_H_
#define CAMERA_REGULATOR_H_

#include <opencv/cv.h>
#include <opencv/cv.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/video.hpp>
#include <opencv2/stitching.hpp>
#include <iostream>
#include <typeinfo>
#include <cstdio>
#include "DEF.H"

class CAMERA_REGULATOR {

private:

	cv::VideoCapture cap;
	cv::Mat foundedCorners;
	cv::Mat lastFrame;
	CvSize csSize;
	std::vector<cv::Mat> arrayOfCorners;


	std::vector<cv::Point3f> corners;


	int centerX;
	int centerY;
	cv::Scalar a;

	CAMERA_REGULATOR(CAMERA_REGULATOR& cam) {
		//TODO
	}

	//METHODS

	void receiveFrame() {
		cap >> lastFrame;

		centerX = lastFrame.cols / 2;
		centerY = lastFrame.rows / 2;
	}

	cv::Mat& getLastFrame() {

		receiveFrame();
		//cv::cvtColor(lastFrame, lastFrame, CV_BGR2GRAY);

		return lastFrame;

	}

	bool findChessboard() {
		getLastFrame();

		bool founded = cv::findChessboardCorners(lastFrame, csSize,
				foundedCorners, 1);

		return founded;
	}

	void checkHorizontal() {
		float dif1 = foundedCorners.ptr<cv::Vec2f>(1)->val[0]
				- foundedCorners.ptr<cv::Vec2f>(0)->val[0];
		float dif2 = foundedCorners.ptr<cv::Vec2f>(
				foundedCorners.rows * foundedCorners.cols - 1)->val[0]
				- foundedCorners.ptr<cv::Vec2f>(
						foundedCorners.rows * foundedCorners.cols - 2)->val[0];
		if ((dif1) > (dif2)) {
			//std::cout << "Prawa Bliżej";
			cv::circle(lastFrame,
					cv::Point((centerX - (dif1 - dif2) * 6), centerY), 50, a,
					20);
		} else {
			//std::cout << "Lewa Bliżej";

			cv::circle(lastFrame,
					cv::Point((centerX + (dif2 - dif1) * 6), centerY), 50, a,
					20);
		}







	}


	void checkVertical() {




		cv::Scalar b(0,0,200);
		//std::cout << foundedCorners;
		float dif1 = foundedCorners.ptr<cv::Vec2f>(1)->val[1]
				- foundedCorners.ptr<cv::Vec2f>(0)->val[1];

		float dif2 = foundedCorners.ptr<cv::Vec2f>(
				foundedCorners.rows * foundedCorners.cols - 2)->val[0]
				- foundedCorners.ptr<cv::Vec2f>(
						foundedCorners.rows * foundedCorners.cols - 3)->val[1];

		if ((dif1) > (dif2)) {
			//Upper is closer
			cv::circle(lastFrame,
					cv::Point(centerX, (centerY - (dif1 - dif2) * 2)), 30, b,
					20);
		} else {
			//Bottom is closer

			cv::circle(lastFrame,
					cv::Point(centerX, (centerY + (dif2 - dif1) * 2)), 30, b,
					20);
		}
	}

	inline void convert2GRAY(cv::Mat & in,cv::Mat & out)
	{
		cv::cvtColor(in,out,CV_BGR2GRAY);
	}

	void calibrate()
	{

		cv::Mat bwFrame;
		convert2GRAY(lastFrame,bwFrame);
		cv::Mat pointbuf;


		bool f=cv::findChessboardCorners( bwFrame, csSize, pointbuf,
		      cv::CALIB_CB_ADAPTIVE_THRESH | cv::CALIB_CB_FAST_CHECK | cv::CALIB_CB_NORMALIZE_IMAGE);


		std::cout << pointbuf;



		//normalize

		//calcCorners


	}

public:

	CAMERA_REGULATOR(int camera = 0, CvSize size = CvSize(8, 5),
			cv::Scalar color = cv::Scalar(200)) :
			csSize(size), a(color) {
		cap.open(camera);

	}

	~CAMERA_REGULATOR() {
		cap.release();
	}

	//METHODS

	void run() {
		while (true) {
			if (findChessboard()) {
				//findChessboard();

				//cv::circle(lastFrame, cv::Point(centerX, centerY), 80, a, 20);

				//checkHorizontal();
				//pcheckVertical();

				//cv::drawChessboardCorners(lastFrame, csSize, foundedCorners, 1);


			}
			cv::imshow("N", lastFrame);

			char pressedKey=cv::waitKey(1);
			if(pressedKey=='c')
				break;
			else if ( pressedKey=='p')
				calibrate();

		}
	}

	void stop() {

	}

};

#endif /* CAMERA_REGULATOR_H_ */
